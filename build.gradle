/*
 * Copyright (C) 2023 Markus Fleischhacker <markus.fleischhacker28@gmail.com>
 *
 * This file is part of Bounding Box Editor
 *
 * Bounding Box Editor is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * Bounding Box Editor is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with Bounding Box Editor. If not, see <http://www.gnu.org/licenses/>.
 */
plugins {
    id 'application'
    id 'org.openjfx.javafxplugin' version '0.1.0'
    id 'org.javamodularity.moduleplugin' version '1.8.15'
    id 'com.github.ben-manes.versions' version '0.51.0'
    id 'org.beryx.jlink' version '3.0.1'
    id 'jacoco'
    id 'net.ltgt.errorprone' version '4.0.1'
    id 'org.sonarqube' version '5.1.0.4882'
    id 'org.ysb33r.cloudci' version '4.0.0'
    id 'com.github.hierynomus.license' version '0.16.1'
    id 'io.miret.etienne.sass' version '1.5.0'
    id "com.ryandens.javaagent-test" version "0.5.1"
}

group 'com.github.mfl28'
version '2.7.0'

repositories {
    mavenCentral()
}

dependencies {
    // Junit (Unit testing)
    testImplementation 'org.junit.jupiter:junit-jupiter:5.10.3'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'

    // TestFx UI TesTing // https://mvnrepository.com/artifact/org.testfx/testfx-junit5
    testImplementation('org.testfx:testfx-junit5:4.0.18') {
        exclude group: 'org.hamcrest'
    }

    // https://mvnrepository.com/artifact/nl.jqno.equalsverifier/equalsverifier
    testImplementation 'nl.jqno.equalsverifier:equalsverifier:3.16.1'

    // Hamcrest https://mvnrepository.com/artifact/org.hamcrest/hamcrest
    testImplementation 'org.hamcrest:hamcrest:2.2'

    // Mockito https://mvnrepository.com/artifact/org.mockito/mockito-inline
    testImplementation 'org.mockito:mockito-inline:5.2.0'

    // Mockito-Junit https://mvnrepository.com/artifact/org.mockito/mockito-junit-jupiter
    testImplementation 'org.mockito:mockito-junit-jupiter:5.12.0'

    testImplementation 'com.google.jimfs:jimfs:1.3.0'

    testJavaagent "net.bytebuddy:byte-buddy-agent:1.14.18"

    // Commons Collections https://mvnrepository.com/artifact/org.apache.commons/commons-collections4
    implementation 'org.apache.commons:commons-collections4:4.4'

    // Commons Lang https://mvnrepository.com/artifact/org.apache.commons/commons-lang3
    implementation 'org.apache.commons:commons-lang3:3.14.0'

    // https://mvnrepository.com/artifact/commons-io/commons-io
    implementation 'commons-io:commons-io:2.16.1'

    // ControlsFX https://mvnrepository.com/artifact/org.controlsfx/controlsfx
    implementation('org.controlsfx:controlsfx:11.2.1') {
        exclude group: 'org.openjfx'
    }

    // Caffeine https://mvnrepository.com/artifact/com.github.ben-manes.caffeine/caffeine
    implementation 'com.github.ben-manes.caffeine:caffeine:3.1.8'

    // Gradle plugin to use the error-prone compiler https://github.com/tbroyer/gradle-errorprone-plugin
    errorprone 'com.google.errorprone:error_prone_core:2.28.0'

    // Google GSON https://github.com/google/gson
    implementation 'com.google.code.gson:gson:2.11.0'

    // Jersey REST client https://mvnrepository.com/artifact/org.glassfish.jersey.core/jersey-client
    implementation 'org.glassfish.jersey.core:jersey-client:3.1.7'

    // HK2 InjectionManager https://mvnrepository.com/artifact/org.glassfish.jersey.inject/jersey-hk2
    implementation 'org.glassfish.jersey.inject:jersey-hk2:3.1.7'

    // Jersey Multipart https://mvnrepository.com/artifact/org.glassfish.jersey.media/jersey-media-multipart
    implementation 'org.glassfish.jersey.media:jersey-media-multipart:3.1.7'

    // Jaxb runtime https://mvnrepository.com/artifact/org.glassfish.jaxb/jaxb-runtime
    implementation 'org.glassfish.jaxb:jaxb-runtime:4.0.5'

    // Mimepull https://mvnrepository.com/artifact/org.jvnet.mimepull/mimepull
    implementation 'org.jvnet.mimepull:mimepull:1.10.0'

    // Xml bind https://mvnrepository.com/artifact/jakarta.xml.bind/jakarta.xml.bind-api
    implementation 'jakarta.xml.bind:jakarta.xml.bind-api:4.0.2'

    // https://mvnrepository.com/artifact/jakarta.ws.rs/jakarta.ws.rs-api
    implementation 'jakarta.ws.rs:jakarta.ws.rs-api:4.0.0'

    // https://mvnrepository.com/artifact/org.locationtech.jts/jts-core
    implementation 'org.locationtech.jts:jts-core:1.19.0'

    // https://mvnrepository.com/artifact/com.drewnoakes/metadata-extractor
    implementation 'com.drewnoakes:metadata-extractor:2.19.0'
    
    implementation 'com.opencsv:opencsv:5.9'
}

javafx {
    version = '22.0.1'
    modules = ['javafx.base', 'javafx.graphics', 'javafx.controls', 'javafx.swing']
}

test {
    useJUnitPlatform()

    jvmArgs = ['-Dtestfx.robot=awt', '-Dprism.forceGPU=true']
    maxHeapSize = '3072m'

    moduleOptions {
        runOnClasspath = true
    }

    finalizedBy jacocoTestReport
}

ci {
    githubactions {
        test {
            systemProperty "fullScreenTests", false
            jvmArgs = ['-Dprism.verbose=true', '-Djava.net.preferIPv6Addresses=system']

            if(org.gradle.internal.os.OperatingSystem.current().macOsX) {
                // Currently there is no support for running UI tests on macOS in a VM via github-actions.
                useJUnitPlatform {
                    excludeTags 'ui'
                }
            }
        }
    }
}

jacocoTestReport {
    reports {
        xml.required = true
        html.required = true
        csv.required = false
    }
}

def isNonStable = { String version ->
  def stableKeyword = ['RELEASE', 'FINAL', 'GA'].any { it -> version.toUpperCase().contains(it) }
  def regex = /^[0-9,.v-]+(-r)?$/
  return !stableKeyword && !(version ==~ regex)
}

tasks.named("dependencyUpdates").configure {
  rejectVersionIf {
    isNonStable(it.candidate.version)
  }
}

compileSass {
    outputDir = layout.buildDirectory.file ("resources/main/stylesheets/css").get().asFile
    destPath = "."
    sourceDir = project.file ("${projectDir}/src/main/resources/stylesheets/scss")
    style = expanded
    noCharset ()
    noErrorCss ()
    sourceMap = none
}

compileJava {
    options.compilerArgs.addAll(['-Xlint:all', '-Xlint:-requires-automatic'])
}

compileTestJava {
    dependsOn compileSass
}

jar {
    dependsOn compileSass
    from compileSass.outputDir
}

application {
    mainModule = "com.github.mfl28.boundingboxeditor"
    mainClass = "com.github.mfl28.boundingboxeditor.BoundingBoxEditorApp"
    applicationDefaultJvmArgs = ['-Dprism.forceGPU=true', '-Djava.net.preferIPv6Addresses=system']
}

java {
    modularity.inferModulePath = false
    toolchain {
        languageVersion.set(JavaLanguageVersion.of(21))
    }
}

jlink {
    options = ['--strip-debug', '--compress', 'zip-6', '--no-header-files', '--no-man-pages']
    launcher {
        name = 'BoundingBoxEditor'
        jvmArgs = ['-Dprism.forceGPU=true', '-Djava.net.preferIPv6Addresses=system']
    }

    forceMerge 'jakarta'

    mergedModule {
        additive = true
        uses 'jakarta.ws.rs.client.ClientBuilder'
        uses 'jakarta.ws.rs.ext.RuntimeDelegate'
    }

    imageZip = layout.buildDirectory.file("distributions/boundingboxeditor-${javafx.platform.classifier}.zip")

    jpackage {
        installerOptions += [
                '--app-version', version,
                '--copyright', 'Copyright 2023, Markus Fleischhacker',
                '--description', 'Graphical image annotation application',
                '--license-file', 'LICENSE',
                '--vendor', 'Markus Fleischhacker',
        ]

        if(org.gradle.internal.os.OperatingSystem.current().windows) {
            installerOptions += [
                    '--win-per-user-install',
                    '--win-dir-chooser',
                    '--win-menu',
                    '--win-menu-group', 'Bounding Box Editor',
                    '--win-shortcut'
            ]
            icon = 'src/main/resources/icons/app_icon.ico'
            installerType = 'exe'
        } else if(org.gradle.internal.os.OperatingSystem.current().linux) {
            installerOptions += [
                    '--resource-dir', 'build/jpackage/BoundingBoxEditor/lib',
                    '--linux-shortcut',
                    '--linux-menu-group', 'Graphics',
                    '--linux-deb-maintainer', 'markus.fleischhacker28@gmail.com'
            ]
            icon = 'src/main/resources/icons/app_icon.png'
        } else if(org.gradle.internal.os.OperatingSystem.current().macOsX) {
            icon = 'src/main/resources/icons/app_icon.icns'
        }

        // Allow to pass installer type as command line parameter:
        if(project.hasProperty('installerType')) {
            installerType = project.property('installerType')
        }
    }
}

tasks.register('dist') {
    dependsOn clean, jlinkZip
}

sonar {
    properties {
        property "sonar.projectKey", "mfl28_BoundingBoxEditor"
        property "sonar.organization", "mfl28"
    }
}

license {
    header = rootProject.file('gradle/LICENSE_HEADER')
    strictCheck = true

    mapping {
        scss = 'SLASHSTAR_STYLE'
        css = 'SLASHSTAR_STYLE'
        java = 'SLASHSTAR_STYLE'
    }

    excludes(['**/_*.scss', '**/styles.css', '**/testannotations/**/*', '**/testimages/**/*', '**/icons/*'])

    ext.year = Calendar.getInstance().get(Calendar.YEAR)
    ext.author = 'Markus Fleischhacker'
    ext.project = 'Bounding Box Editor'
    ext.email = 'markus.fleischhacker28@gmail.com'
}

